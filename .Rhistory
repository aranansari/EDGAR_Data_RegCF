library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(ggiraph)
library(sf)
library(geojsonR)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(ggthemes)
library(gganimate)
library(dplyr)
install.packages(ggplot2)
install.package(ggplot2)
install.package(tmap)
register_google(key = "AIzaSyBVCg_aJcCEdoI8IbrpxVjSuG541LytOVc", write = TRUE)
library(sf)
library(ggmap)
library(rgdal)
library(mapsapi)
library(readr)
install.packages(c("ggmap", "readr", "rgdal", "sf"))
library(sf)
library(ggmap)
library(rgdal)
library(mapsapi)
library(readr)
library(sf)
library(ggmap)
library(rgdal)
library(mapsapi)
library(readr)
install.packages(c("rgdal", "sf"))
register_google(key = "AIzaSyBVCg_aJcCEdoI8IbrpxVjSuG541LytOVc", write = TRUE)
register_google
location.df <- read.csv("/Users/Aran/Documents/Experiments/countofinvestors.csv")
register_google(key = "AIzaSyBVCg_aJcCEdoI8IbrpxVjSuG541LytOVc", write = TRUE)
tm_shape(nz) +
tm_fill()
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
library(ggmap)
install.packages(ggmap)
install.packages('ggmap')
install.packages('sf')
install.packages('mapsapi')
install.packages('readr')
install.packages("readr")
library(sf)
install.packages('sf')
library(sf)
library(rgdal)
library(mapsapi)
library(readr)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
if(!requireNamespace("devtools")) install.packages("devtools")
library(ggmap)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
`register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)`
`register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
``
`register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
remove.packages("ggmap")
install.packages('ggmap')
devtools::install_github("dkahle/ggmap", ref = "tidyup")
install.packages('rjson')
sudo apt-get install r-base r-base-dev
sudo apt-get install r-cran-rjson
get install r-base r-base-dev
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
install.packages("rjson",depend =TRUE)
install.packages(c("ggmap", "rgdal", "sf"))
install.packages('ggmap')
library(ggmap)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
remove.packages("tibble")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("dkahle/ggmap")
library(ggmap)
library(devtools)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
aes
ggplot()+geom_sf(aes(fill=shape$sum),data=shape)+xlab("Longitude")+ylab("Latitude")+scale_fill_viridis_c(option = "plasma", trans = "sqrt")
register_google(key = "AIzaSyBVCg_aJcCEdoI8IbrpxVjSuG541LytOVc", write = TRUE)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
location.df <- read.csv("/Users/aranansari/R Files/Investor_Locations_4_18.csv")
location.df <- na.omit(location.df)
levels(factor(location.df$business_name))
colors = rainbow(n=29)
colors = c("darkgreen","red","hotpink","black","orange","goldenrod2","lightblue","maroon","darkblue","orchid", "mediumseagreen",
"mediumslateblue"
,"mediumspringgreen"
,"mediumturquoise"
,"mediumvioletred"
,"midnightblue")
location.df$business_name <- factor(location.df$business_name,levels = c("9 Miles East (First Round)",       "Adventure Pub"  ,                 "Amazing Pizza"                   ,
"Brato Brewhouse and Kitchen" ,     "Break Rock Brewing"          ,     "Buff-A-Love"                     ,
"Chez Casa"                    ,    "Claudia's Bake Shop"          ,    "Deep Cuts Deli and Brewery"      ,
"In Season Food Shop"          ,    "Ivyees \"Everything Honey\""  ,    "Keegan Kreations"                ,
"Kin Tap and Rec Room"          ,   "Lobstah On A Roll"             ,   "Merrimack Ales"                  ,
"New Haven Community Solar"      ,  "Nightshade Noodle Bar"          ,  "Provincetown Brewing Co."        ,
"Salem Spice"                     , "Sully's Pro Pizza"               , "Teatotaller"                     ,
"The Plan"                         ,"The Queen Bee"                    ,"The Té Spa"                      ,
"The Wandering Stage"    ,          "Third Cliff Bakery"               ,"Third Cliff Bakery (First Round)",
"Twisted Escape Room"     ,         "Working Man Distillers"  ))
names(colors) = c("9 Miles East (First Round)",       "Adventure Pub"  ,                 "Amazing Pizza"                   ,
"Brato Brewhouse and Kitchen" ,     "Break Rock Brewing"          ,     "Buff-A-Love"                     ,
"Chez Casa"                    ,    "Claudia's Bake Shop"          ,    "Deep Cuts Deli and Brewery"      ,
"In Season Food Shop"          ,    "Ivyees \"Everything Honey\""  ,    "Keegan Kreations"                ,
"Kin Tap and Rec Room"          ,   "Lobstah On A Roll"             ,   "Merrimack Ales"                  ,
"New Haven Community Solar"      ,  "Nightshade Noodle Bar"          ,  "Provincetown Brewing Co."        ,
"Salem Spice"                     , "Sully's Pro Pizza"               , "Teatotaller"                     ,
"The Plan"                         ,"The Queen Bee"                    ,"The Té Spa"                      ,
"The Wandering Stage"    ,          "Third Cliff Bakery"               ,"Third Cliff Bakery (First Round)",
"Twisted Escape Room"     ,         "Working Man Distillers")
colors
colors[1]
colors["Break Rock Brewing"]
location.df$colors <- colors[location.df$business_name]
map <- get_googlemap(center=c(lon=-71,lat=42.5),maptype="terrain", zoom = 8,scale = 2)
map <- get_googlemap(center=c(lon=-71,lat=42.5),maptype="terrain", zoom = 8,scale = 2)
USAMap <- ggmap(map)
USAMap
USAMap <- ggmap(map)
map <- get_googlemap(center=c(lon=-71,lat=42.5),maptype="terrain", zoom = 8,scale = 2)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
library(ggplot2)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(ggiraph)
library(sf)
library(geojsonR)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
library(rsconnect)
library(ggthemes)
library(gganimate)
library(dplyr)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
location.df <- read.csv("/Users/aranansari/R Files/Investor_Locations_4_18.csv")
location.df <- na.omit(location.df)
levels(factor(location.df$business_name))
colors = rainbow(n=29)
colors = c("darkgreen","red","hotpink","black","orange","goldenrod2","lightblue","maroon","darkblue","orchid", "mediumseagreen",
"mediumslateblue"
,"mediumspringgreen"
,"mediumturquoise"
,"mediumvioletred"
,"midnightblue")
location.df$business_name <- factor(location.df$business_name,levels = c("9 Miles East (First Round)",       "Adventure Pub"  ,                 "Amazing Pizza"                   ,
"Brato Brewhouse and Kitchen" ,     "Break Rock Brewing"          ,     "Buff-A-Love"                     ,
"Chez Casa"                    ,    "Claudia's Bake Shop"          ,    "Deep Cuts Deli and Brewery"      ,
"In Season Food Shop"          ,    "Ivyees \"Everything Honey\""  ,    "Keegan Kreations"                ,
"Kin Tap and Rec Room"          ,   "Lobstah On A Roll"             ,   "Merrimack Ales"                  ,
"New Haven Community Solar"      ,  "Nightshade Noodle Bar"          ,  "Provincetown Brewing Co."        ,
"Salem Spice"                     , "Sully's Pro Pizza"               , "Teatotaller"                     ,
"The Plan"                         ,"The Queen Bee"                    ,"The Té Spa"                      ,
"The Wandering Stage"    ,          "Third Cliff Bakery"               ,"Third Cliff Bakery (First Round)",
"Twisted Escape Room"     ,         "Working Man Distillers"  ))
names(colors) = c("9 Miles East (First Round)",       "Adventure Pub"  ,                 "Amazing Pizza"                   ,
"Brato Brewhouse and Kitchen" ,     "Break Rock Brewing"          ,     "Buff-A-Love"                     ,
"Chez Casa"                    ,    "Claudia's Bake Shop"          ,    "Deep Cuts Deli and Brewery"      ,
"In Season Food Shop"          ,    "Ivyees \"Everything Honey\""  ,    "Keegan Kreations"                ,
"Kin Tap and Rec Room"          ,   "Lobstah On A Roll"             ,   "Merrimack Ales"                  ,
"New Haven Community Solar"      ,  "Nightshade Noodle Bar"          ,  "Provincetown Brewing Co."        ,
"Salem Spice"                     , "Sully's Pro Pizza"               , "Teatotaller"                     ,
"The Plan"                         ,"The Queen Bee"                    ,"The Té Spa"                      ,
"The Wandering Stage"    ,          "Third Cliff Bakery"               ,"Third Cliff Bakery (First Round)",
"Twisted Escape Room"     ,         "Working Man Distillers")
colors
colors[1]
colors["Break Rock Brewing"]
location.df$colors <- colors[location.df$business_name]
map <- get_googlemap(center=c(lon=-71,lat=42.5),maptype="terrain", zoom = 8,scale = 2)
USAMap <- ggmap(map)
USAMap
USAMap + stat_density2d(aes(investorLocation$location.df.investor_y,investorLocation$location.df.investor_x,fill=..level..,alpha=..level..),size=.01,data=investorLocation,geom="polygon",bins=1000)+scale_alpha_continuous(range=c(0.02,.2))
USAMap + geom_segment(aes(x=location.df$business_y,y=location.df$business_x,xend=location.df$investor_y,yend=location.df$investor_x),data=location.df,col=location.df$colors,size = 0.15,alpha=.8)
location.df$investor_x <- round(location.df$investor_x,digits=4)
location.df$investor_y <- round(location.df$investor_y,digits=4)
location.df$distanceDif_x <- location.df$business_x - location.df$investor_x
location.df$distanceDif_y <- location.df$business_y - location.df$investor_y
location.df$distanceDif_miles <- 69*sqrt((location.df$distanceDif_x*location.df$distanceDif_x) + (location.df$distanceDif_y*location.df$distanceDif_y))
mean(location.df$distanceDif_miles)
location.df$isUnder50 <- ifelse(location.df$distanceDif_miles<50,1,0)
location.df$isUnder5 <- ifelse(location.df$distanceDif_miles<5,1,0)
location.df$isUnder25 <- ifelse(location.df$distanceDif_miles<25,1,0)
sum(location.df$isUnder50)/nrow(location.df)
sum(location.df$isUnder25)/nrow(location.df)
sum(location.df$isUnder5)/nrow(location.df)
sub50investment.df <- subset(location.df,location.df$isUnder25 ==1)
sum(location.df$business_name)
Nightshade <- subset.data.frame(location.df, business_name=="Nightshade Noodle Bar")
sum(Nightshade$isUnder25)/nrow(Nightshade)
NewHaven <- subset.data.frame(location.df, business_name=="New Haven Community Solar")
sum(NewHaven$isUnder25)/nrow(NewHaven)
Merrimack <- subset.data.frame(location.df, business_name=="Merrimack Ales")
sum(Merrimack$isUnder25)/nrow(Merrimack)
Lobstah <- subset.data.frame(location.df, business_name=="Lobstah On A Roll")
sum(Lobstah$isUnder25)/nrow(Lobstah)
Keegan <- subset.data.frame(location.df, business_name=="Keegan Kreations")
sum(Keegan$isUnder25)/nrow(Keegan)
Chez <- subset.data.frame(location.df, business_name=="Chez Casa")
sum(Chez$isUnder25)/nrow(Chez)
Brato <- subset.data.frame(location.df, business_name=="Brato Brewhouse and Kitchen")
sum(Brato$isUnder25)/nrow(Brato)
AdventurePub <- subset.data.frame(location.df, business_name=="Adventure Pub")
sum(AdventurePub$isUnder50)/nrow(AdventurePub)
AmazingPizza <- subset.data.frame(location.df, business_name=="Amazing Pizza")
sum(AmazingPizza$isUnder25)/nrow(AmazingPizza)
BreakRock <- subset.data.frame(location.df, business_name=="Break Rock Brewing")
sum(BreakRock$isUnder25)/nrow(BreakRock)
ThirdCliff <- subset.data.frame(location.df, business_name=="Third Cliff Bakery (First Round)")
sum(ThirdCliff$isUnder25)/nrow(ThirdCliff)
mean(BreakRock$distanceDif_miles)
mean(ThirdCliff$distanceDif_miles)
percent_close_BR <- nrow(subset(BreakRock,BreakRock$distanceDif_miles<50))/nrow(BreakRock)*100
percent_close_TC <-nrow(subset(ThirdCliff,ThirdCliff$distanceDif_miles<50))/nrow(ThirdCliff)*100
library(ggplot2)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(R2HTML)
library(ggiraph)
library(sf)
library(geojsonR)
library(OpenStreetMap)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
install.packages(c("ggplot2","tmap"))
install.packages(c("ggplot2", "tmap"))
install.packages(c("ggplot2","tmap","leaflet","mapview","R2HTML","ggiraph","sf","geojsonR","OpenStreetMap","sp","geojsonio","ggmap","dplyr","shiny","shinydashboard"))
install.packages(c("ggplot2","tmap","leaflet","mapview","R2HTML","ggiraph","sf","geojsonR","OpenStreetMap","sp","geojsonio","ggmap","dplyr","shiny","shinydashboard"))
library(ggplot2)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(R2HTML)
library(ggiraph)
library(sf)
library(geojsonR)
library(OpenStreetMap)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
install.packages(mapview)
install.packages("mapview")
library(mapview) # for interactive maps
library(sf)
install.packages(c("ggplot2","tmap","leaflet","mapview","R2HTML","ggiraph","sf","geojsonR","OpenStreetMap","sp","geojsonio","ggmap","dplyr","shiny","shinydashboard"))
install.packages(c("ggplot2", "tmap", "leaflet", "mapview", "R2HTML", "ggiraph", "sf", "geojsonR", "OpenStreetMap", "sp", "geojsonio", "ggmap", "dplyr", "shiny", "shinydashboard"))
library(ggplot2)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(R2HTML)
library(ggiraph)
library(sf)
library(geojsonR)
library(OpenStreetMap)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
install.packages("ggiraph")
install.packages("ggiraph")
library(ggiraph)
install.packages(c("ggplot2","tmap","leaflet","mapview","R2HTML","ggiraph","sf","geojsonR","OpenStreetMap","sp","geojsonio","ggmap","dplyr","shiny","shinydashboard"))
install.packages(c("ggplot2", "tmap", "leaflet", "mapview", "R2HTML", "ggiraph", "sf", "geojsonR", "OpenStreetMap", "sp", "geojsonio", "ggmap", "dplyr", "shiny", "shinydashboard"))
library(ggplot2)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(R2HTML)
library(ggiraph)
library(sf)
library(geojsonR)
library(OpenStreetMap)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
install.packages("tmap")
install.packages("sf")
install.packages("tmap")
install.packages("ggplot2")
install.packages("sf")
install.packages("sf")
Noinstall.packages("tmap")
install.packages("tmap")
install.packages("leafem")
install.packages("terra")
install.packages("leafem")
install.packages("tmap")
install.packages("leaflet")
install.packages("mapview")
install.packages("R2HTML")
library(sf)
install.packages("R2HTML")
install.packages("ggiraph")
library(ggiraph)
install.packages("geojsonR")
install.packages("OpenStreetMap")
install.packages("sp")
install.packages("geojsonio")
install.packages("ggmap")
install.packages("dplyr")
install.packages("dplyr")
install.packages("shiny")
install.packages("shinydashboard")
library(ggplot2)
library(sf)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(R2HTML)
library(ggiraph)
library(geojsonR)
library(OpenStreetMap)
library(sp)
library(geojsonio)
library(ggmap)
library(dplyr)
library(shiny)
library(shinydashboard)
library(OpenStreetMap)
JAVA_HOME
install.packageS("rJava")
install.packages("rJava")
library(OpenStreetMap)
library(rJava)
gentrification.df <- read.csv(file.choose(new = FALSE))
gentrification.df <- read.csv(file.choose(new = FALSE))
#Read in JSON file that includes the polygonal shapes of the neighborhoods
NYC.js <- geojson_read(file.choose(new = FALSE),what="sp")
#Test if it prints the outlines
colnames(NYC.js@data)[colnames(NYC.js@data)=="ntacode"] <- "GeoID"
NYC.js@data$id <- seq(0,194,by=1)
NYC.js@data <- merge(NYC.js@data,gentrification.df,by="GeoID",all=TRUE)
#Fortify and merge the two data sets
NYC.js.f <- fortify(NYC.js)
NYC.js.f <- merge(NYC.js.f,NYC.js@data,by="id",all=TRUE)
#GOOGLE Maps requires API key
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
#GOOGLE Maps requires API key
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8", write = TRUE)
#GOOGLE Maps requires API key
remove.packages("tibble")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
#GOOGLE Maps requires API key
remove.packages("tibble")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
if(!requireNamespace("devtools")) install.packages("devtools")
install.packages("rjson",depend =TRUE)
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
library(devtools)
#GOOGLE Maps requires API key
remove.packages("tibble")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
#Use data to layer outline over real NYC map (ggmap). Using GFactor2010 as fill
#2010
Outline10  <- geom_polygon_interactive(aes(long,lat,group=group,fill=GFactor2010,tooltip=sprintf("%s<br>%s",NYC.js.f$GeogName,GFactor2010)),data=NYC.js.f,colour = "black")
mapImage <- ggmap(get_googlemap(c(lon=-74.0060,lat=40.7128),scale=1,zoom=10),extent = "panel")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
library(ggmap)
install.packages("ggmap")
library(ggmap)
install.packages("rjson")
install.packages("rjson")
register_google(key = "AIzaSyCB3s03JVUmb_cpbhWrt_BF52hWwxnHXT8")
#Use data to layer outline over real NYC map (ggmap). Using GFactor2010 as fill
#2010
Outline10  <- geom_polygon_interactive(aes(long,lat,group=group,fill=GFactor2010,tooltip=sprintf("%s<br>%s",NYC.js.f$GeogName,GFactor2010)),data=NYC.js.f,colour = "black")
mapImage <- ggmap(get_googlemap(c(lon=-74.0060,lat=40.7128),scale=1,zoom=10),extent = "panel")
install.packages('ggmap')
install.packages('sf')
install.packages('rgdal')
install.packages('mapsapi')
install.packages('readr')
install.packages(c("rgdal", "sf"))
library(sf)
library(ggmap)
library(rgdal)
library(mapsapi)
library(readr)
install.packages('rjson')
ap <- available.packages()
install.packages("rjson",depend =TRUE)
remove.packages("tibble")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
inst_packages <-  installed.packages()
if ("rjson" %in% inst_packages[, 1]) {
#uninstalls package
remove.packages("rjson")
#re-installs package
install.packages("rjson")
}
View(inst_packages)
install.packages('rjson')
install.packages("rjson",depend =TRUE)
install.packages("tidyverse")
library(tidyverse)
# Set working directory to the folder with all the zip files for each year
setwd("/Users/aranansari/EDGAR_Data_RegCF")
Folders <- list.files(path=getwd())
for (i in seq(length(Folders))) {
unzip(Folders[i])
}
#REMOVE ZIP FOLDERS
do.call(file.remove, list(list.files(getwd(), pattern = ".zip",full.names = TRUE)))
#Re-initiate the folders class
Folders <- list.files(path=getwd(),full.names=TRUE)
Files <- as.data.frame(list.files(path=Folders[1:length(Folders)],full.names = TRUE))
#create lists of files of certain types (offering, issuers, etc)
FORM_C_SUBMISSION <-list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORMDSUBMISSION.tsv")
FORM_C_ISSUER_INFORMATION <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="ISSUERS.tsv")
FORM_C_ISSUER_JURISDICTIONS <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="OFFERING.tsv")
FORM_C_DISCLOSURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="RECIPIENTS.tsv")
FORM_C_SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="RELATEDPERSONS.tsv")
FORM_C_ISSUER_SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="SIGNATURES.tsv")
#create lists of files of certain types (offering, issuers, etc)
FORM_C_SUBMISSION <-list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_SUBMISSION.tsv")
FORM_C_ISSUER_INFORMATION <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_INFORMATION.tsv")
FORM_C_ISSUER_JURISDICTIONS <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_JURISDICTIONS.tsv")
FORM_C_DISCLOSURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_DISCLOSURE.tsv")
FORM_C_SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_SIGNATURE.tsv")
FORM_C_ISSUER_SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_SIGNATURE.tsv")
#import the data from each of these files, placing them in a large list of data frames
FORM_C_SUBMISSION.DATA <- lapply(FORM_C_SUBMISSION,read.csv,sep = '\t')
FORM_C_ISSUER_INFORMATION.DATA <- lapply(FORM_C_ISSUER_INFORMATION,read.csv,sep = '\t')
FORM_C_ISSUER_JURISDICTIONS.DATA <- lapply(FORM_C_ISSUER_JURISDICTIONS,read.csv,sep = '\t')
FORM_C_DISCLOSURE.DATA <- lapply(FORM_C_DISCLOSURE,read.csv,sep = '\t')
FORM_C_SIGNATURE.DATA <- lapply(FORM_C_SIGNATURE,read.csv,sep = '\t')
FORM_C_ISSUER_SIGNATURE.DATA <- lapply(FORM_C_ISSUER_SIGNATURE,read.csv,sep = '\t')
#for each type of file, combine the files into larger ones, eventually having only 6 very long dataframes
FORM_C_SUBMISSION.MASTER<-do.call("rbind",FORM_C_SUBMISSION.DATA)
FORM_C_ISSUER_INFORMATION.MASTER<-do.call("rbind",FORM_C_ISSUER_INFORMATION.DATA)
FORM_C_ISSUER_JURISDICTIONS.MASTER<-do.call("rbind",FORM_C_ISSUER_JURISDICION.DATA)
FORM_C_DISCLOSURE.MASTER<-do.call("rbind",FORM_C_DISCLOSURE.DATA)
FORM_C_ISSUER_JURISDICTIONS.MASTER<-do.call("rbind",FORM_C_ISSUER_JURISDICIONS.DATA)
#import the data from each of these files, placing them in a large list of data frames
FORM_C_SUBMISSION.DATA <- lapply(FORM_C_SUBMISSION,read.csv,sep = '\t')
FORM_C_ISSUER_INFORMATION.DATA <- lapply(FORM_C_ISSUER_INFORMATION,read.csv,sep = '\t')
FORM_C_ISSUER_JURISDICTIONS.DATA <- lapply(FORM_C_ISSUER_JURISDICTIONS,read.csv,sep = '\t')
FORM_C_DISCLOSURE.DATA <- lapply(FORM_C_DISCLOSURE,read.csv,sep = '\t')
FORM_C_SIGNATURE.DATA <- lapply(FORM_C_SIGNATURE,read.csv,sep = '\t')
FORM_C_ISSUER_SIGNATURE.DATA <- lapply(FORM_C_ISSUER_SIGNATURE,read.csv,sep = '\t')
#for each type of file, combine the files into larger ones, eventually having only 6 very long dataframes
FORM_C_SUBMISSION.MASTER<-do.call("rbind",FORM_C_SUBMISSION.DATA)
FORM_C_ISSUER_INFORMATION.MASTER<-do.call("rbind",FORM_C_ISSUER_INFORMATION.DATA)
FORM_C_ISSUER_JURISDICTIONS.MASTER<-do.call("rbind",FORM_C_ISSUER_JURISDICIONS.DATA)
FORM_C_ISSUER_JURISDICTIONS.MASTER<-do.call("rbind",FORM_C_ISSUER_JURISDICIONS.DATA)
FORM_C_ISSUER_JURISDICTIONS.DATA <- lapply(FORM_C_ISSUER_JURISDICTIONS,read.csv,sep = '\t')
FORM_C_ISSUER_JURISDICTIONS.MASTER<-do.call("rbind",FORM_C_ISSUER_JURISDICTIONS.DATA)
FORM_C_DISCLOSURE.MASTER<-do.call("rbind",FORM_C_DISCLOSURE.DATA)
FORM_C_SIGNATURE.MASTER<-do.call("rbind",FORM_C_SIGNATURE.DATA)
FORM_C_ISSUER_SIGNATURE.MASTER<-do.call("rbind",FORM_C_ISSUER_SIGNATURE.DATA)
#create csv files of the combined data frames
write.csv(FORMDSUBMISSION.MASTER,"FORMDSUBMISSION.MASTER.csv",row.names=FALSE)
SUBMISSION <-list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_SUBMISSION.tsv")
INFORMATION <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_INFORMATION.tsv")
JURISDICTIONS <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_JURISDICTIONS.tsv")
DISCLOSURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_DISCLOSURE.tsv")
SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_SIGNATURE.tsv")
ISSUER_SIGNATURE <- list.files(path=Folders[1-length(Folders)],full.names = TRUE,pattern="FORM_C_ISSUER_SIGNATURE.tsv")
SUBMISSION.DATA <- lapply(SUBMISSION,read.csv,sep = '\t')
INFORMATION.DATA <- lapply(INFORMATION,read.csv,sep = '\t')
JURISDICTIONS.DATA <- lapply(JURISDICTIONS,read.csv,sep = '\t')
DISCLOSURE.DATA <- lapply(DISCLOSURE,read.csv,sep = '\t')
SIGNATURE.DATA <- lapply(SIGNATURE,read.csv,sep = '\t')
ISSUER_SIGNATURE.DATA <- lapply(ISSUER_SIGNATURE,read.csv,sep = '\t')
SUBMISSION.MASTER<-do.call("rbind",SUBMISSION.DATA)
INFORMATION.MASTER<-do.call("rbind",INFORMATION.DATA)
JURISDICTIONS.MASTER<-do.call("rbind",JURISDICTIONS.DATA)
DISCLOSURE.MASTER<-do.call("rbind",DISCLOSURE.DATA)
SIGNATURE.MASTER<-do.call("rbind",SIGNATURE.DATA)
ISSUER_SIGNATURE.MASTER<-do.call("rbind",ISSUER_SIGNATURE.DATA)
write.csv(SUBMISSION.MASTER,"SUBMISSION.MASTER.csv",row.names=FALSE)
write.csv(INFORMATION.MASTER,"ISSUERS.MASTER.csv",row.names=FALSE)
write.csv(JURISDICTIONS.MASTER,"OFFERING.MASTER.csv",row.names=FALSE)
write.csv(DISCLOSURE.MASTER,"RECIPIENTS.MASTER.csv",row.names=FALSE)
write.csv(SIGNATURE.MASTER,"RELATEDPERSONS.MASTER.csv",row.names=FALSE)
write.csv(ISSUER_SIGNATURE.MASTER,"SIGNATURES.MASTER.csv",row.names=FALSE)
summary(SUBMISSION.MASTER)
